/*
Question: 
Check Permutation: Given two strings, write a method to decide if one is a permutation of the
other.
*/

/*
Questions to ask: Is character set limited to ASCII? yes, let's assume it is
Is there any limitation of size? Like less length greater than integer size? no
*/

/*
Examples:
	Hello, ellHo: true
	Hey, Hii: false
	Hello, llloH: false
	llloH, Hello: false
	Howzatt, Howtt: false
	"", "": true
	null, null: true
	null, awe: false

	ab,eidbaooo
*/

/*
Rules for permutation:
Same length
Same frequency of characters
Algo:
1) Using an array of 256 size. If there is no restriction over character set then use HashMap<Character, Integer> to store each character's frequency
2) Sort and Compare
*/

public static boolean isPermutation(String stringOne, String stringTwo) {
	if(stringOne == null) {
		if(stringTwo == null) {
			return true;
		}
		return false;
	}

	if(stringOne.length() != stringTwo.length()) return false;

	int[] frequencyArray = new int[256];

	for(int i=0; i<stringOne.length(); i++) {
		int arrayIndex = stringOne.charAt(i);
		frequencyArray[arrayIndex] = frequencyArray[arrayIndex]++;
	}

	for(int j=0; j<stringTwo.length(); j++) {
		int arrayIndex = stringTwo.charAt(j);
		int frequency = frequencyArray[arrayIndex] = frequencyArray[arrayIndex]--;
		
		if(frequency < 0) return false;
	}

	for(int k=0; k<256; k++) {
		if(frequencyArray[k] != 0) return false;
	}

	return true;
}

/*
Time complexity: O(n) + O(m) -> max(O(m), O(n))
Space complexity: O(1)
*/